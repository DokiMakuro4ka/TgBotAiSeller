import telebot
from client import GptSalesClient
import os

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω—ã –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
api_key = os.environ.get("OPENAI_API_KEY")
TG_TOKEN = os.environ.get("TELEGRAM_TOKEN")

# –°–æ–∑–¥–∞—ë–º –±–æ—Ç–∞ –∏ GPT –∫–ª–∏–µ–Ω—Ç
bot = telebot.TeleBot(TG_TOKEN)
gpt_client = GptSalesClient(api_key=api_key)

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_histories = {}
# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è CRM-–¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
user_crm = {}

def get_crm_str(crm):
    return (
        f"–ò–º—è: {crm.get('name', '‚Äî')}\n"
        f"–ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–∫—É–ø–∫–∞: {crm.get('last_purchase', '‚Äî')}\n"
        f"–ë—é–¥–∂–µ—Ç: {crm.get('budget', '‚Äî')} ‚ÇΩ\n"
        f"–°—Ç–∞—Ç—É—Å —Å–¥–µ–ª–∫–∏: {crm.get('deal_status', '‚Äî')}"
    )

@bot.message_handler(commands=['start'])
def start_message(message):
    user_id = message.from_user.id
    user_histories[user_id] = []
    user_crm[user_id] = {"step": 0, "data": {}}
    bot.send_message(
        message.chat.id,
        "üëã <b>–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!</b>\n\n"
        "–Ø ‚Äî –≤–∞—à –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç.\n"
        "–ß—Ç–æ–±—ã –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–ª—è –≤–∞—Å –ª—É—á—à–∏–π –∞–≤—Ç–æ–º–æ–±–∏–ª—å, –¥–∞–≤–∞–π—Ç–µ –∑–∞–ø–æ–ª–Ω–∏–º –≤–∞—à–∏ –¥–∞–Ω–Ω—ã–µ CRM.\n\n"
        "<b>–ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è? (–í–∞—à–µ –∏–º—è)</b>",
        parse_mode="HTML"
    )

@bot.message_handler(commands=['reset'])
def reset_history(message):
    user_id = message.from_user.id
    user_histories[user_id] = []
    user_crm[user_id] = {"step": 0, "data": {}}
    bot.send_message(message.chat.id, "–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –∏ CRM-–¥–∞–Ω–Ω—ã–µ —Å–±—Ä–æ—à–µ–Ω—ã. –ù–∞–ø–∏—à–∏—Ç–µ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")

@bot.message_handler(func=lambda m: True)
def handle_message(message):
    user_id = message.from_user.id

    # --- CRM –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ ---
    if user_id in user_crm and user_crm[user_id]["step"] < 4:
        step = user_crm[user_id]["step"]
        data = user_crm[user_id]["data"]

        if step == 0:
            data["name"] = message.text.strip()
            user_crm[user_id]["step"] += 1
            bot.send_message(message.chat.id, "üöó <b>–ö–∞–∫—É—é –º–∞—à–∏–Ω—É –≤—ã –ø–æ–∫—É–ø–∞–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–π?</b>", parse_mode="HTML")
            return
        elif step == 1:
            data["last_purchase"] = message.text.strip()
            user_crm[user_id]["step"] += 1
            bot.send_message(message.chat.id, "üí∏ <b>–ö–∞–∫–æ–π —É –≤–∞—Å –ø—Ä–∏–º–µ—Ä–Ω—ã–π –±—é–¥–∂–µ—Ç? (–≤ —Ä—É–±–ª—è—Ö)</b>", parse_mode="HTML")
            return
        elif step == 2:
            try:
                budget = int("".join(filter(str.isdigit, message.text.strip())))
                data["budget"] = budget
            except Exception:
                bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –±—é–¥–∂–µ—Ç —á–∏—Å–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä: 3000000")
                return
            user_crm[user_id]["step"] += 1
            bot.send_message(message.chat.id, "üìà <b>–°—Ç–∞—Ç—É—Å –≤–∞—à–µ–π —Å–¥–µ–ª–∫–∏?</b> (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í –ø—Ä–æ—Ü–µ—Å—Å–µ, –ó–∞–≤–µ—Ä—à–µ–Ω–∞, –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞)", parse_mode="HTML")
            return
        elif step == 3:
            data["deal_status"] = message.text.strip()
            user_crm[user_id]["step"] += 1
            bot.send_message(
                message.chat.id,
                "üëè <b>–°–ø–∞—Å–∏–±–æ!</b> –í–∞—à–∏ CRM-–¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã:\n\n"
                f"{get_crm_str(data)}\n\n"
                "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç (–Ω–∞–ø—Ä–∏–º–µ—Ä: –•–æ—á—É Bentley).\n"
                "–î–ª—è —Å–±—Ä–æ—Å–∞ –∏—Å—Ç–æ—Ä–∏–∏ –∏ CRM-–¥–∞–Ω–Ω—ã—Ö –æ—Ç–ø—Ä–∞–≤—å—Ç–µ /reset",
                parse_mode="HTML"
            )
            return

    # --- –î–∏–∞–ª–æ–≥ —Å GPT ---
    if user_id not in user_histories:
        user_histories[user_id] = []
    if user_id not in user_crm or user_crm[user_id]["step"] < 4:
        bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–ø–æ–ª–Ω–∏—Ç–µ CRM-–¥–∞–Ω–Ω—ã–µ. –ù–∞–ø–∏—à–∏—Ç–µ /start.")
        return

    prompt = message.text
    history = user_histories[user_id]
    crm_record = user_crm[user_id]["data"]

    try:
        answer = gpt_client.ask(prompt, crm_record, history)
        bot.send_message(message.chat.id, answer)
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–ª—è —ç—Ç–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        history.append({"role": "user", "content": prompt})
        history.append({"role": "assistant", "content": answer})
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞: {e}")
        bot.send_message(message.chat.id, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ –ò–ò. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        
if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling(none_stop=True)
